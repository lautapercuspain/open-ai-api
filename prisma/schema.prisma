generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextIndex", "fullTextSearch", "multiSchema"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  schemas   = ["next_auth", "public"]
}

model Prompt {
  id             String   @id @default(cuid())
  prompt         String   @default("")
  createdAt      DateTime @default(now())

  @@schema("public")
}

model CheckoutSessions {
  id          String    @id @default(cuid())
  amount      Int
  checkoutURL String    @db.VarChar(500)
  confirmed   Boolean
  email       String
  name        String
  userId      String
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @default(now())

  @@schema("public")
}

model accounts {
  id                 String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         BigInt?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  userId             String? @db.Uuid
  users              users?  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([provider, providerAccountId], map: "provider_unique")
  @@schema("next_auth")
}

model sessions {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  expires      DateTime @db.Timestamptz(6)
  sessionToken String   @unique(map: "sessiontoken_unique")
  userId       String?  @db.Uuid
  users        users?   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@schema("next_auth")
}

model users {
  id             String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           String?
  email          String?    @unique(map: "email_unique")
  isPremium      Boolean    @default(false)
  subscriptionId String     @default("")
  emailVerified  DateTime?  @db.Timestamptz(6)
  image          String?
  accounts       accounts[]
  sessions       sessions[]

  @@schema("next_auth")
}

model verification_tokens {
  identifier String?
  token      String   @id
  expires    DateTime @db.Timestamptz(6)

  @@unique([token, identifier], map: "token_identifier_unique")
  @@schema("next_auth")
}
