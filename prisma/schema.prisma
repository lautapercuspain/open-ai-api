// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

model User {
  id            String    @id @default(cuid())
  name          String?
  apiCalls      Int? 
  credits       Int       @default(0)
  tokensCount   Int? 
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts       Account[]
  sessions       Session[]
  createdAt      DateTime       @default(now())
}
model CheckoutSessions {
  id            String    @id @default(cuid())
  amount        Int 
  checkoutURL   String    @db.VarChar(500)
  confirmed     Boolean
  email         String
  name          String
  userId        String
  credits       Int             @default(0)
  createdAt     DateTime?       @default(now())
  updatedAt     DateTime?       @default(now())
}
model Trials {
  id            String    @id @default(cuid())
  apiCalls      Int 
  ip            Int 
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now())
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}



